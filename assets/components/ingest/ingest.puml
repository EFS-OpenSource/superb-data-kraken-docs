@startuml

EventHub -> argo: "accessmanager-commit" [Kafka]
argo --> Ingest: start ingest [NATS]

group basic-metadata-handling
    Ingest --> BasicMetadataHandler: generate basic-metadata
    BasicMetadataHandler -> Keycloak: request ServiceAccount-Token [http]
    Keycloak -> BasicMetadataHandler: Response [http]
    BasicMetadataHandler -> Keycloak: request User-Token [http]
    note right: use ServiceAccount-Token
    Keycloak -> BasicMetadataHandler: Response [http]

    BasicMetadataHandler -> Organizationmanager: should generate basic-metadata? [http]
    note right: use of User-Token
    Organizationmanager -> BasicMetadataHandler: Response [http]

    BasicMetadataHandler -> Accessmanager: create read-SAS-Token [http]
    note right: use of User-Token
    Accessmanager -> BasicMetadataHandler: Response [http]

    BasicMetadataHandler -> AzureStorage: list files [https]
    note right: use of read-SAS-Token
    AzureStorage -> BasicMetadataHandler: Response [https]

    BasicMetadataHandler -> BasicMetadataHandler: generate basic-metadata

    BasicMetadataHandler -> Accessmanager: create upload-SAS-Token [http]
    note right: use of User-Token
    Accessmanager -> BasicMetadataHandler: Response [http]

    BasicMetadataHandler -> AzureStorage: upload basic-metadata [https]
    note right: use of upload-SAS-Token
    AzureStorage -> BasicMetadataHandler: Response [https]

    BasicMetadataHandler --> Ingest: Response
end

group anonymize
    Ingest --> AnonymizationHandler: to implement
    note right: unimplemented
    AnonymizationHandler --> Ingest: Response
end

group enrichment
    Ingest -->EnrichmentHandler: to implement
    note right: unimplemented
    EnrichmentHandler --> Ingest: Response
end

group validate
    Ingest -->ValidationHandler: to implement
    note right: unimplemented
    ValidationHandler --> Ingest: Response
end

group move-data
    Ingest -->MoveDataHandler: move-data
    MoveDataHandler -> Keycloak: request ServiceAccount-Token
    Keycloak -> MoveDataHandler: Response
    MoveDataHandler -> Keycloak: request User-Token
    note right: use ServiceAccount-Token
    Keycloak -> MoveDataHandler: Response

    MoveDataHandler -> MoveDataHandler: validate Request (e.g. source-container=target-container)

    MoveDataHandler -> Accessmanager: create delete-SAS-Token [http]
    Accessmanager -> MoveDataHandler: Response

    MoveDataHandler -> Accessmanager: create upload-SAS-Token (to main-storage) [http]
    Accessmanager -> MoveDataHandler: Response

    MoveDataHandler -> Accessmanager: create read-SAS-Token [http]
    Accessmanager -> MoveDataHandler: Response

    MoveDataHandler -> AzureStorage: list files [https]
    note right: use of read-SAS-Token
    AzureStorage -> MoveDataHandler: Response [https]

    loop for f in files
        MoveDataHandler -> AzureBlobStorage: copy file [https]
        note right: use of upload-SAS-Token
        AzureBlobStorage -> MoveDataHandler: Response [https]

        loop while 'pending'
            MoveDataHandler -> MoveDataHandler: wait
        end

        MoveDataHandler -> AzureBlobStorage: delete file [https]
        note right: use of delete-SAS-Token
        AzureBlobStorage -> MoveDataHandler: Response [https]
    end

    MoveDataHandler --> Ingest: Response
end

group metadata-index
    Ingest -->MetadataIndexHandler: index metadata
    MetadataIndexHandler -> Keycloak: request ServiceAccount-Token [http]
    Keycloak -> MetadataIndexHandler: Response [http]
    
    MetadataIndexHandler -> Keycloak: request User-Token [http]
    note right: use ServiceAccount-Token
    Keycloak -> MetadataIndexHandler: Response [http]

    MetadataIndexHandler -> Metadata: index metadata [http]
    note right: use User-Token
    Metadata -> MetadataIndexHandler: Response [http]
    MetadataIndexHandler --> Ingest: Response
end
@enduml